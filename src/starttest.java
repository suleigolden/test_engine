
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.lang.Thread.sleep;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author SULEIGOLDEN
 */
public class starttest extends javax.swing.JFrame {

    /**
     * @return the total_mark
     */
    public static String getTotal_mark() {
        return total_mark;
    }

    /**
     * @param aTotal_mark the total_mark to set
     */
    public static void setTotal_mark(String aTotal_mark) {
        total_mark = aTotal_mark;
    }

    /**
     * @return the get_mark_test
     */
    public static String getGet_mark_test() {
        return get_mark_test;
    }

    /**
     * @param aGet_mark_test the get_mark_test to set
     */
    public static void setGet_mark_test(String aGet_mark_test) {
        get_mark_test = aGet_mark_test;
    }

    /**
     * @return the set_mark_test
     */
    public static String getSet_mark_test() {
        return set_mark_test;
    }

    /**
     * @param aSet_mark_test the set_mark_test to set
     */
    public static void setSet_mark_test(String aSet_mark_test) {
        set_mark_test = aSet_mark_test;
    }
    Connection conn;
      //Connection con;
    ResultSet rs ;
    PreparedStatement pst;
    
     Timer time;
      
         static String total_mark;
         static String get_mark_test;
         static String set_mark_test;
        
        static String cnadidate_fnlscore;
        static String candidate_fnlresult;
        
        static String cadidate_result_id;
        
        String marks_all = "" ;
        String setmain_questanswer = "" ;
        String get_main_questanswer ="";
        String yes_final ="";
    /**
     * Creates new form starttest
     */
    public starttest() {
        initComponents();
        conn=conect_data.conect();
        
        jProgressBar1.setVisible(false);
        suject_combo.setVisible(false);
        ans_combo.setVisible(false);
        txt_question.setEditable(false);
        bnt_next.setVisible(false);
        bnt_prev.setVisible(false);
        bnt_finish.setVisible(false);
        
        lbquestionid.setVisible(false);
        qq.setVisible(false);
        lbget_lbanswer.setVisible(false);
        lb_correct.setVisible(false);
        lb_incorrect.setVisible(false);
        jLabel12.setVisible(false);
        jLabel7.setVisible(false);
        conbo_addroundom.setVisible(false);
        
        set_test_timeandothers();
        set_candidatename();
        start_test();
        this.setLocationRelativeTo ( null );
        this.setResizable(false);
        setIcon();
    }
 private void setIcon() {
     setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("images2.jpg")));  
    }
     public void set_candidatename(){
         newtest nt = new newtest();
        lb_candidate_reg_no.setText(nt.getCadidate_test_reg_no());
        
         String candidate_name = nt.getCadidate_test_name();
         lb_name.setText(candidate_name);
    }
     
    
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        optione = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        optionc = new javax.swing.JRadioButton();
        optiond = new javax.swing.JRadioButton();
        optionb = new javax.swing.JRadioButton();
        optiona = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_question = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lb_candidate_reg_no = new javax.swing.JLabel();
        lb_candidate_reg_no1 = new javax.swing.JLabel();
        lb_name = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        suject_combo = new javax.swing.JComboBox();
        ans_combo = new javax.swing.JComboBox();
        bnt_prev = new javax.swing.JButton();
        bnt_next = new javax.swing.JButton();
        lbget_lbanswer = new javax.swing.JLabel();
        lbquestionid = new javax.swing.JLabel();
        bnt_finish = new javax.swing.JButton();
        qq = new javax.swing.JLabel();
        lb_incorrect = new javax.swing.JLabel();
        lb_correct = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lb_nanq = new javax.swing.JLabel();
        lb_anq = new javax.swing.JLabel();
        btn_preview = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        lb_total_number_of_question = new javax.swing.JLabel();
        conbo_addroundom = new javax.swing.JComboBox();
        jProgressBar1 = new javax.swing.JProgressBar();
        timmm = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lb_test_timer = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        subject_test_name = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbqs = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbof = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 15));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 5));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("A");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setText("E");

        optione.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        optione.setForeground(new java.awt.Color(0, 0, 102));
        optione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optioneActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("C");

        optionc.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        optionc.setForeground(new java.awt.Color(0, 0, 102));
        optionc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optioncActionPerformed(evt);
            }
        });

        optiond.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        optiond.setForeground(new java.awt.Color(0, 0, 102));
        optiond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optiondActionPerformed(evt);
            }
        });

        optionb.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        optionb.setForeground(new java.awt.Color(0, 0, 102));
        optionb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionbActionPerformed(evt);
            }
        });

        optiona.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        optiona.setForeground(new java.awt.Color(0, 0, 102));
        optiona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionaActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setText("B");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("D");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(optiona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addComponent(jLabel8))
                                .addComponent(jLabel9)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optiond, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(optionc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(optionb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(optione, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(optiona)
                    .addComponent(jLabel6))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optionb)))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(optionc))
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(optiond))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(optione))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txt_question.setBackground(new java.awt.Color(0, 0, 0));
        txt_question.setColumns(20);
        txt_question.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        txt_question.setForeground(new java.awt.Color(255, 255, 255));
        txt_question.setRows(5);
        jScrollPane1.setViewportView(txt_question);

        jButton4.setBackground(new java.awt.Color(204, 204, 0));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 102, 0));
        jButton4.setText("Start");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Registration Number :");

        lb_candidate_reg_no.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lb_candidate_reg_no.setText(".....................");

        lb_candidate_reg_no1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lb_candidate_reg_no1.setText("Name :");

        lb_name.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lb_name.setText("...............................................................");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lb_candidate_reg_no1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lb_name, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lb_candidate_reg_no, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lb_candidate_reg_no1)
                        .addComponent(lb_name)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(lb_candidate_reg_no)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        jPanel4.setBackground(new java.awt.Color(0, 0, 102));

        bnt_prev.setBackground(new java.awt.Color(255, 255, 255));
        bnt_prev.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bnt_prev.setForeground(new java.awt.Color(0, 51, 153));
        bnt_prev.setText("<<<Previous");
        bnt_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_prevActionPerformed(evt);
            }
        });

        bnt_next.setBackground(new java.awt.Color(255, 255, 255));
        bnt_next.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bnt_next.setForeground(new java.awt.Color(0, 51, 153));
        bnt_next.setText("Next >>>");
        bnt_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_nextActionPerformed(evt);
            }
        });

        lbget_lbanswer.setForeground(new java.awt.Color(255, 255, 0));
        lbget_lbanswer.setText("Get Answer");

        lbquestionid.setForeground(new java.awt.Color(51, 255, 255));
        lbquestionid.setText("question ID");

        bnt_finish.setBackground(new java.awt.Color(204, 0, 0));
        bnt_finish.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bnt_finish.setForeground(new java.awt.Color(255, 255, 255));
        bnt_finish.setText("Finish");
        bnt_finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_finishActionPerformed(evt);
            }
        });

        qq.setForeground(new java.awt.Color(255, 255, 255));
        qq.setText("jLabel2");

        lb_incorrect.setForeground(new java.awt.Color(255, 255, 255));
        lb_incorrect.setText("0");

        lb_correct.setForeground(new java.awt.Color(255, 255, 255));
        lb_correct.setText("0");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Number of Question Answer :");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Number of Question Not Answer :");

        lb_nanq.setForeground(new java.awt.Color(255, 255, 255));

        lb_anq.setForeground(new java.awt.Color(255, 255, 255));

        btn_preview.setBackground(new java.awt.Color(255, 255, 255));
        btn_preview.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_preview.setForeground(new java.awt.Color(0, 0, 153));
        btn_preview.setText("preview");
        btn_preview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_previewActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Total Number of Question :");

        lb_total_number_of_question.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(34, 34, 34)
                        .addComponent(lb_anq, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(10, 10, 10)
                        .addComponent(lb_nanq, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(34, 34, 34)
                        .addComponent(lb_total_number_of_question, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_preview, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(conbo_addroundom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(lb_incorrect, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(ans_combo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(lb_correct, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(suject_combo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbget_lbanswer)
                            .addComponent(lbquestionid))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(qq)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(bnt_prev)
                                .addGap(90, 90, 90)
                                .addComponent(bnt_next, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(290, 290, 290)
                        .addComponent(bnt_finish, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bnt_prev, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bnt_next, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bnt_finish))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(lbget_lbanswer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(qq, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbquestionid)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ans_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lb_correct)
                            .addComponent(lb_incorrect)
                            .addComponent(conbo_addroundom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(suject_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lb_total_number_of_question, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lb_anq, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(lb_nanq, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_preview)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        timmm.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("OF");

        lb_test_timer.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Time :");

        subject_test_name.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Question :");

        lbqs.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbqs.setText("0000");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("OF");

        lbof.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbof.setText("0000");

        jLabel12.setText("jLabel12");

        jLabel7.setText("jLabel7");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lbqs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGap(20, 20, 20)
                        .addComponent(lbof)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addGap(15, 15, 15))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(jLabel7)))
                .addComponent(subject_test_name, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(940, 940, 940)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(lb_test_timer, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(timmm, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(lbqs)
                            .addComponent(lbof)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(subject_test_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel7)))))
                .addGap(1, 1, 1)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(timmm, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_test_timer, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1362, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int get_qanda(){
         String sum = "";
      try{
            String sql ="select count(id) from start_test ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if(rs.next()){
                  sum =rs.getString("count(id)");
                  
                  lbof.setText(String.format("%s", sum));
            }
            
        }catch(Exception e){
         JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
        }catch(Exception e){
            
         }
        }
       return Integer.parseInt(sum);
    }
     String name = "";
         String answer = "";
         String option_a = "";
         String option_b = "" ;
         String option_c = "" ;
         String option_d = "" ;
         String marks = "" ;
         int count =0;
         int gettotal =4;
         
        
        
          
    public void getstart_test(){  
           String get_test_time = newtest.gettable_value();
           int getround_count=Integer.parseInt(qq.getText());
           //int rand =(int)(Math.random() *getround_count);
           int size = getround_count;
        ArrayList<Integer> list = new ArrayList<Integer>(size);
        for(int i = 1; i <= size; i++) {
            list.add(i);
        }

        Random rand = new Random();
        while(list.size() > 0) {
            int index = rand.nextInt(list.size());
            int get = list.remove(index);
             //System.out.println("Selected: "+get);
             //System.out.println("YES!");
        
             try{
            String sqlf ="select * from '"+get_test_time+"' WHERE id = '" +get+ "'";
            pst=conn.prepareStatement(sqlf);
            rs=pst.executeQuery();
            
            while(rs.next()){
                  name =rs.getString("question");
                  answer =rs.getString("answer");
                  option_a =rs.getString("option_a");
                  option_b =rs.getString("option_b");
                  option_c =rs.getString("option_c");
                  option_d =rs.getString("option_d");
                  marks =rs.getString("mark"); 
                  inserttest();
                  //JOptionPane.showMessageDialog(null, "Done!");
            }
             
        }catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }finally{
        try{
            pst.close();
        }catch(Exception e){
            
         }
        }
         
      } 
    }
    public void inserttest(){
         try{ 
            String sqll ="INSERT INTO start_test(question,answer,option_a,option_b,option_c,option_d,mark) VALUES (?,?,?,?,?,?,?)";
            pst=conn.prepareStatement(sqll);
            pst.setString(1,name );
            pst.setString(2, answer);
            pst.setString(3, option_a);
            pst.setString(4, option_b);
            pst.setString(5, option_c);
            pst.setString(6, option_d);
            pst.setString(7, marks);
            pst.execute();
            
            
         }catch(Exception e){
         JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            
            pst.close();
        }catch(Exception e){
            
        }
       }
    }
    
    public void start_test(){
//        int count_test = Integer.parseInt(qq.getText());
//        int inc=0;
//        do{
//           
//           inc ++;
//        }while(inc < count_test);
        getstart_test();
    }
 
 int get_sum = 0;
 int life = 0;
 private void Fill_suject(){
      bnt_prev.setEnabled(true);
        clear_combo();
       
        try{
            String sql ="select * from start_test WHERE id = '" +get_sum+ "'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            while(rs.next()){
                String ques_id =rs.getString("id");
                String name =rs.getString("question");
                suject_combo.addItem(name);
                String answer =rs.getString("answer");
                String option_a =rs.getString("option_a");
                String option_b =rs.getString("option_b");
                String option_c =rs.getString("option_c");
                String option_d =rs.getString("option_d");
                ans_combo.addItem(answer);
                ans_combo.addItem(option_a);
                ans_combo.addItem(option_b);
                ans_combo.addItem(option_c);
                ans_combo.addItem(option_d);
                lbquestionid.setText(ques_id);
            }
             
        }catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }finally{
        try{
            pst.close();
        }catch(Exception e){
            
         }
        }
     
  }
 String main_anser = "";
 public void reverse(){
     bnt_next.setEnabled(true);
       get_sum -= 1;
       
       if(get_sum == 0 || get_sum < 0){
           bnt_prev.setEnabled(false);
       }else{
        lbqs.setText(String.format("%s", get_sum));
        
     
        jLabel7.setText(String.format("%s", get_sum));
             String id2 = jLabel7.getText();
try{
           
             String sql ="select * from mark_test where id ='"+id2+"' ";
              pst=conn.prepareStatement(sql);
             rs=pst.executeQuery();
             if(rs.next()){
                 
                    String add1 =rs.getString("question_id");
                    
                    String add2 =rs.getString("question");
                    txt_question.setText(add2);
                    String add3 =rs.getString("answer");
                    jLabel12.setText(add3);
                    String add4 =rs.getString("opa");
                    optiona.setText(add4);
                    String add5 =rs.getString("opb");
                    optionb.setText(add5);
                    String add6 =rs.getString("opc");
                    optionc.setText(add6);
                    String add7 =rs.getString("opd");
                    optiond.setText(add7);
                    String add8 =rs.getString("ope");
                    optione.setText(add8);
                    
             }
        }catch(Exception e){
         JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
          // conn.close();
        }catch(Exception e){
          
        }
     }
   }
      // reverse_answers();
 }
 
 
  public void reverse_forword(){
     //bnt_next.setEnabled(true);
       //get_sum += 1;
      if(get_sum == life){
       clear_option();
       Fill_suject();
       set_question();
       set_answers();
       reset_color();
      }else{
       look_insertmark();
       if(get_sum == 0 || get_sum < 0){
           //bnt_prev.setEnabled(false);
       }else{
        lbqs.setText(String.format("%s", get_sum));
        
      
        jLabel7.setText(String.format("%s", get_sum));
             String id2 = jLabel7.getText();
 try{
           
             String sql ="select * from mark_test where id ='"+id2+"' ";
              pst=conn.prepareStatement(sql);
             rs=pst.executeQuery();
             if(rs.next()){
                 
                    String add1 =rs.getString("question_id");
                    
                    String add2 =rs.getString("question");
                    txt_question.setText(add2);
                    String add3 =rs.getString("answer");
                    jLabel12.setText(add3);
                    String add4 =rs.getString("opa");
                    optiona.setText(add4);
                    String add5 =rs.getString("opb");
                    optionb.setText(add5);
                    String add6 =rs.getString("opc");
                    optionc.setText(add6);
                    String add7 =rs.getString("opd");
                    optiond.setText(add7);
                    String add8 =rs.getString("ope");
                    optione.setText(add8);
                    
             }
        }catch(Exception e){
         JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
          // conn.close();
        }catch(Exception e){
          
        }
     }
   }
  }
       // reverse_answers();
 }
 
 public void reverse_answers(){
                    clear_option();
                    reset_color();
                    
                    String getmainreverse_anser = jLabel12.getText();
                    String a = optiona.getText(), b =optionb.getText() , c = optionc.getText(), d = optiond.getText(), e =optione.getText();
                    //JOptionPane.showMessageDialog(null,"Call Me!" + a + b + c + d + e + "/" + main_anser);
                    if(optiona.getText().toString().equals(getmainreverse_anser)){
                        //JOptionPane.showMessageDialog(null,main_anser);
                        optiona.setSelected(true);
                    }
                    
                    else if(optionb.getText().toString().equals(getmainreverse_anser)){
                         //JOptionPane.showMessageDialog(null,main_anser);
                        optionb.setSelected(true);
                    }
                   
                    else if(optionc.getText().toString().equals(getmainreverse_anser)){
                       //  JOptionPane.showMessageDialog(null,main_anser);
                        optionc.setSelected(true);
                    }
                   
                    else if(optiond.getText().toString().equals(getmainreverse_anser)){
                        // JOptionPane.showMessageDialog(null,main_anser);
                        optiond.setSelected(true);
                    }
                    else if(optione.getText().toString().equals(getmainreverse_anser)){
                        // JOptionPane.showMessageDialog(null,main_anser);
                        optione.setSelected(true);
                    }
 } 

    public void clear_combo(){
        suject_combo.removeAllItems();
        ans_combo.removeAllItems();
        
    }
    public void clear_option(){
     optiona.setSelected(false);
     optionb.setSelected(false);
     optionc.setSelected(false);
     optiond.setSelected(false);
     optione.setSelected(false);
}
    public void set_question(){
        
        try{
             ComboBoxModel mode = suject_combo.getModel();
        int setsize = mode.getSize();
        String [] get_qest = new String [setsize];
                ComboBoxModel model = suject_combo.getModel();
                int size = model.getSize();
                for(int i=0; i < size; i++) {
                    Object element = model.getElementAt(i);
                   // System.out.println("Element at " + i + " = " + element);
                    get_qest[i] = String.format("%s",element);
                }
                int rand2 =(int)(Math.random() *get_qest.length);
        
                String hh = get_qest[rand2];
                txt_question.setText(hh);
        }catch(Exception e){
            
        }
        
    }
  public void get_answers_to_set(){
      conbo_addroundom.removeAllItems();
           int getround_count=5;
           //int rand =(int)(Math.random() *getround_count);
           int size = getround_count;
        ArrayList<Integer> list = new ArrayList<Integer>(size);
        
        //ComboBoxModel model = ans_combo.getModel();
        String model [] = {"A","B","C","D","E"};
        for(int i = 1; i <= size; i++) {
            list.add(i);
        }

        Random rand = new Random();
        while(list.size() > 0) {
            int index = rand.nextInt(list.size());
            int get = list.remove(index);
            
            if(get == 5){
                get = 0;
            }
             String element  = model[get];
            //System.out.println("Element at " + 0 + " = " + element);
            //System.out.println(get);
            conbo_addroundom.addItem(element);
          
     }
 }
 public void set_answers(){
      get_answers_to_set();
           String get_test_time = newtest.gettable_value();
           
           ComboBoxModel mode = ans_combo.getModel();
           int setsize = mode.getSize();
           int getround_count=setsize;
           //int rand =(int)(Math.random() *getround_count);
           int size = getround_count;
        ArrayList<Integer> list = new ArrayList<Integer>(size);
        
        ComboBoxModel model = ans_combo.getModel();
        ComboBoxModel model_option =conbo_addroundom.getModel();
        
        for(int i = 1; i <= size; i++) {
            list.add(i);
        }

        Random rand = new Random();
        while(list.size() > 0) {
            int index = rand.nextInt(list.size());
            int get = list.remove(index);
            
            if(get == 5){
                get = 0;
            }
            Object element = model.getElementAt(get);
            Object element_option = model_option.getElementAt(get);
           // System.out.println("Element at " + 0 + " = " + element);
            //System.out.println(get);
            //conbo_addroundom.addItem(element);
            if(element_option.equals("A")){
                optiona.setText(""+element);
            }else if(element_option.equals("B")){
                optionb.setText(""+element);
            }else if(element_option.equals("C")){
                optionc.setText(""+element);
            }else if(element_option.equals("D")){
                optiond.setText(""+element);
            }else if(element_option.equals("E")){
                optione.setText(""+element);
            }
            
}
 }
    
    public void update_last_test_mark(){
       
         try{
           
            String value1 = txt_question.getText();
            String value2 = lbquestionid.getText();
            

            String sql="update mark_test set question='"+value1+"' where id='"+value2+"' ";
            pst=conn.prepareStatement(sql);
            pst.execute();
            //JOptionPane.showMessageDialog(null,"Updated");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
          // conn.close();
        }catch(Exception e){
          
        }
     }
    }
   
    public void update_marktest(){
        String setupdate_answer = "";
         
         if(optiona.isSelected() == true){
             setupdate_answer = optiona.getText();
         }else if(optionb.isSelected() == true){
             setupdate_answer = optionb.getText();
         }else if(optionc.isSelected() == true){
             setupdate_answer = optionc.getText();
         }else if(optiond.isSelected() == true){
             setupdate_answer = optiond.getText();
         }else if(optione.isSelected() == true){
             setupdate_answer = optione.getText();
         }else{
             setupdate_answer = lbget_lbanswer.getText();
         }
         try{
           
            String value1 = lbquestionid.getText();
            String value2 = txt_question.getText();
            String value3 = setupdate_answer;
            String value4 = optiona.getText();
            String value5 = optionb.getText();
            String value6 = optionc.getText();
            String value7 = optiond.getText();
            String value8 = optione.getText();
            
            String vv = lbqs.getText();
            String sql="update mark_test set answer='"+value3+"' where question_id = '"+vv+"' ";
            pst=conn.prepareStatement(sql);
            pst.execute();
            //JOptionPane.showMessageDialog(null,"Updated " + vv);
        }catch(Exception e){
            //JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
        }catch(Exception e){
          
        }
     }
    }
    public void update_marktest_forword(){
        String setupdate_answer = "";
         
         if(optiona.isSelected() == true){
             setupdate_answer = optiona.getText();
         }else if(optionb.isSelected() == true){
             setupdate_answer = optionb.getText();
         }else if(optionc.isSelected() == true){
             setupdate_answer = optionc.getText();
         }else if(optiond.isSelected() == true){
             setupdate_answer = optiond.getText();
         }else if(optione.isSelected() == true){
             setupdate_answer = optione.getText();
         }else{
             setupdate_answer = lbget_lbanswer.getText();
         }
         try{
           
            String value1 = lbquestionid.getText();
            String value2 = txt_question.getText();
            String value3 = setupdate_answer;
            String value4 = optiona.getText();
            String value5 = optionb.getText();
            String value6 = optionc.getText();
            String value7 = optiond.getText();
            String value8 = optione.getText();
            
            String vv = "";
            int u =Integer.parseInt(lbqs.getText());
            int total_u = u - 1;
            vv = String.format("%s", total_u);
            
            String sql="update mark_test set answer='"+value3+"' where question_id = '"+vv+"' ";
            pst=conn.prepareStatement(sql);
            pst.execute();
            //JOptionPane.showMessageDialog(null,"Updated " + vv);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
        }catch(Exception e){
          
        }
     }
    }
    public void look_insertmark(){
            
             int f_value = Integer.parseInt(lbqs.getText());
             int s_value = f_value - 1;
             String value1 = String.format("%s", s_value);
            // String sql ="select * from mark_test where question_id ='"+value1+"' ";
        try{
            //JOptionPane.showMessageDialog(null," Search " + value1);
             String sql ="select question_id from mark_test where question_id ='"+value1+"' ";
              pst=conn.prepareStatement(sql);
             rs=pst.executeQuery();
             if(rs.next()){
//                    JOptionPane.showMessageDialog(null,"The Registration NUMBER that you are trying to save is already exist, please type in another Registration NUMBER and try again !");
                    //JOptionPane.showMessageDialog(null,"Found!");
                    //update_marktest();
                    //update_inert_answer_answered();
                   // JOptionPane.showMessageDialog(null,"Updated");
                 String yes = "yes";
             }else{
                     
        try{
           String sqll ="INSERT INTO mark_test(question_id,question,answer,opa,opb,opc,opd,ope) VALUES (?,?,?,?,?,?,?,?)";
            pst=conn.prepareStatement(sqll);
            pst.setString(1,lbquestionid.getText());
            pst.setString(2, txt_question.getText());
            pst.setString(3, lbget_lbanswer.getText());
            pst.setString(4, optiona.getText().toString());
            pst.setString(5, optionb.getText().toString());
            pst.setString(6, optionc.getText().toString());
            pst.setString(7,optiond.getText().toString());
            pst.setString(8, optione.getText().toString());
            pst.execute();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
          // conn.close();
        }catch(Exception e){
          
        }
     }
      
       
             }
        }catch(Exception e){
         JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
          // conn.close();
        }catch(Exception e){
          
        }
        }
    }
    public void get_and_insert_mark_test(){
         String set_answer = "";
         
         if(optiona.isSelected() == true){
             set_answer = lbget_lbanswer.getText();
         }else if(optionb.isSelected() == true){
             set_answer = lbget_lbanswer.getText();
         }else if(optionc.isSelected() == true){
             set_answer =lbget_lbanswer.getText();
         }else if(optiond.isSelected() == true){
             set_answer = lbget_lbanswer.getText();
         }else if(optione.isSelected() == true){
             set_answer = lbget_lbanswer.getText();
         }else{
             set_answer = "no";
         }
          try{
           String sqll ="INSERT INTO mark_test(question_id,question,answer,opa,opb,opc,opd,ope) VALUES (?,?,?,?,?,?,?,?)";
            pst=conn.prepareStatement(sqll);
            pst.setString(1,lbquestionid.getText());
            pst.setString(2, txt_question.getText());
            pst.setString(3, set_answer);
            pst.setString(4, optiona.getText().toString());
            pst.setString(5, optionb.getText().toString());
            pst.setString(6, optionc.getText().toString());
            pst.setString(7,optiond.getText().toString());
            pst.setString(8, optione.getText().toString());
            pst.execute();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
          // conn.close();
        }catch(Exception e){
          
        }
     }
    }
    public void insert_mark_test(){
       String stqest = "Where is NIGERIA located ?";
       String a ="Africa";
       String b ="America";
       String c ="Europe";
       String d ="Asia";
       String e ="Antarctica";
      
       
        if(txt_question.getText().equals(stqest) || optiona.getText().equals(e) || optionb.getText().equals(a) || optionc.getText().equals(b) || optiond.getText().equals(d) || optione.getText().equals(c)){
          String insert ="no";  
        }else{
            
            //if(test_count == get_total_test ){String don_insert = "End of test"; JOptionPane.showMessageDialog(null, "");}else{
                  
          get_and_insert_mark_test();
                // JOptionPane.showMessageDialog(null,"Yes Inserted!");
        //}
    }
  }
  
    private void bnt_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_nextActionPerformed
     bnt_prev.setEnabled(true);
        int get_total_test =  get_qanda() + 1;
        
        life +=1;
        get_sum += 1;
         //JOptionPane.showMessageDialog(null, get_sum +"/" + life); 
         if(lbqs.getText().equals("1") && optiona.isSelected() == false && optionb.isSelected() == false && optionc.isSelected()== false && optiond.isSelected()== false && optione.isSelected()== false){
                    JOptionPane.showMessageDialog(null, "You Most Answer The First Question !"); 
                    life -=1;
                    get_sum -= 1;
           }else{
                
            
        lbqs.setText(String.format("%s", get_sum));
        
        String convert_sum = String.format("%s",get_sum );
        String convert_get_total = String.format("%s",get_total_test );
         if(get_sum  == get_total_test){
            
             get_sum -= 1;
             lbqs.setText(String.format("%s", get_sum));
              insert_mark_test();
               count_answered_and_not_ansered();
                  JOptionPane.showMessageDialog(null, "End of test"); 
             //get_sum = get_total_test;
                  bnt_next.setEnabled(false);
        }else if(get_sum == life){
	   
       insert_mark_test();
       clear_option();
       Fill_suject();
       set_question();
       set_answers();
       reset_color();
       count_answered_and_not_ansered();
}else if(get_sum < life){
            life -=1;
            
            update_marktest_forword();
            reverse_forword();
            reverse_answers();
           count_answered_and_not_ansered();
            
        }
       
         }
    }//GEN-LAST:event_bnt_nextActionPerformed
 
  public void count_answered_and_not_ansered(){
      lb_total_number_of_question.setText(lbof.getText());
      String value1 = "no";
     
      try{
            String sql ="select count(question_id) from mark_test where answer !='"+value1+"' ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if(rs.next()){
                    String sum =rs.getString("count(question_id)");
                   lb_anq.setText(sum);
            }
            
        }catch(Exception e){
         JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
          // conn.close();
        }catch(Exception e){
          
        }
     }
       String value2 = "no";
      try{
            String sql ="select count(question_id) from mark_test where answer='"+value2+"' ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if(rs.next()){
                    String sum =rs.getString("count(question_id)");
                   lb_nanq.setText(sum);
            }
            
        }catch(Exception e){
         JOptionPane.showMessageDialog(null,e);
        }finally{
        try{
            pst.close();
          // conn.close();
        }catch(Exception e){
          
        }
     }
  }
    public void reset_color(){
        optiona.setForeground(Color.BLACK);
        optionb.setForeground(Color.BLACK);
        optionc.setForeground(Color.BLACK);
        optiond.setForeground(Color.BLACK);
        optione.setForeground(Color.BLACK);
    }
    private void optionbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionbActionPerformed
       optiona.setSelected(false);
       optionc.setSelected(false);
       optiond.setSelected(false);
       optione.setSelected(false);
       optionb.setForeground(Color.RED);
       optiona.setForeground(Color.BLACK);
       optionc.setForeground(Color.BLACK);
       optiond.setForeground(Color.BLACK);
       optione.setForeground(Color.BLACK);
       lbget_lbanswer.setText(optionb.getText()); 
    }//GEN-LAST:event_optionbActionPerformed

    private void optioncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optioncActionPerformed
       optiona.setSelected(false);
       optionb.setSelected(false);
       optiond.setSelected(false);
       optione.setSelected(false);
       optionc.setForeground(Color.RED);
       optiona.setForeground(Color.BLACK);
       optionb.setForeground(Color.BLACK);
       optiond.setForeground(Color.BLACK);
       optione.setForeground(Color.BLACK);
       lbget_lbanswer.setText(optionc.getText()); 
    }//GEN-LAST:event_optioncActionPerformed

    private void optiondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optiondActionPerformed
       optiona.setSelected(false);
       optionb.setSelected(false);
       optionc.setSelected(false);
       optione.setSelected(false);
       optiond.setForeground(Color.RED);
       optiona.setForeground(Color.BLACK);
       optionb.setForeground(Color.BLACK);
       optionc.setForeground(Color.BLACK);
       optione.setForeground(Color.BLACK);
       lbget_lbanswer.setText(optiond.getText()); 
    }//GEN-LAST:event_optiondActionPerformed

    private void optioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optioneActionPerformed
       optiona.setSelected(false);
       optionb.setSelected(false);
       optionc.setSelected(false);
       optiond.setSelected(false);
       optione.setForeground(Color.RED);
       optiona.setForeground(Color.BLACK);
       optionb.setForeground(Color.BLACK);
       optionc.setForeground(Color.BLACK);
       optiond.setForeground(Color.BLACK);
       lbget_lbanswer.setText(optione.getText()); 
    }//GEN-LAST:event_optioneActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         // insert_mark_test();
       String stqest = "Where is NIGERIA located ?";
       String a ="Africa";
       String b ="America";
       String c ="Europe";
       String d ="Asia";
       String e ="Antarctica";
       txt_question.setText(stqest);
       optiona.setText(e);
       optionb.setText(a);
       optionc.setText(b);
       optiond.setText(d);
       optione.setText(c);
       optionb.setSelected(true);
       JOptionPane.showMessageDialog(null,"You Have "+timmm.getText()+" minute to finish this test. Read each question and click the correct answer from the given options and click NEXT" +"\n"
                                          + " For Example The first question that you see is an Example, witch simply says Where is NIGERIA located ?. the Correct answer is B."
                                          + "Simply Click on FINISH when you want to end the test. Click OK to Continue Your Test");
       bnt_next.setVisible(true);
       bnt_prev.setVisible(true);
       bnt_finish.setVisible(true);
       jButton4.setVisible(false);
        start_test_timer(); 
        //jPanel3.setSize(32767, 32767);
        jPanel1.setSize(32767, 32767);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void bnt_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_prevActionPerformed
        update_marktest();
        reverse();
        reverse_answers();
        count_answered_and_not_ansered();
    }//GEN-LAST:event_bnt_prevActionPerformed

    
    public void mark_test(){
        int count_test = Integer.parseInt(qq.getText());
        int inc=0;
        do{
           getstart_test();
           inc ++;
        }while(inc < count_test);
        
    }
      public void get_allquestion(){
          ending();
         int quest_no = 1;
         int final_mark = 0;
         
         int correct =0;
         int incorrect =0;
         int cnt = Integer.parseInt(qq.getText());
         do{
         try{
            String sqlf ="select * from start_test WHERE id = '" +quest_no+ "'";
            pst=conn.prepareStatement(sqlf);
            rs=pst.executeQuery();
            
            while(rs.next()){
                  String name =rs.getString("question");
                  setmain_questanswer =rs.getString("answer");
                  String option_a =rs.getString("option_a");
                  String option_b =rs.getString("option_b");
                  String option_c =rs.getString("option_c");
                  String option_d =rs.getString("option_d");
                  marks_all =rs.getString("mark"); 
                  starttest.setSet_mark_test(setmain_questanswer);
                  starttest.setTotal_mark(marks_all);
                  
                  
            }
             
        }catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }finally{
        try{
            pst.close();
        }catch(Exception e){
            
         }
        }
         
         String convert_quest_no = String.format("%s", quest_no);
         
          try{
            String sqlf ="select * from mark_test WHERE question_id = '"+quest_no+"'";
            pst=conn.prepareStatement(sqlf);
            rs=pst.executeQuery();
            
            while(rs.next()){
                  String name =rs.getString("question_id");
                  String answer =rs.getString("question");
                  String option_a =rs.getString("answer");
                  
                  starttest.setGet_mark_test(option_a);
                  
                  String final_ans_test = starttest.getSet_mark_test();
                  String final_ans_test2 = starttest.getGet_mark_test();
                 // JOptionPane.showMessageDialog(null, final_ans_test+"/"+final_ans_test2);
                  
                  int allfinalmark = Integer.parseInt(starttest.getTotal_mark());
                  
                  if(final_ans_test.equals(final_ans_test2)){
                      final_mark  += allfinalmark;
                      
                      yes_final =String.format("%s", final_mark);
                      
                      correct +=1;
                      lb_correct.setText(String.format("%s", correct));
                  }else{
                      incorrect +=1;
                      lb_incorrect.setText(String.format("%s", incorrect));
                  }
            }
             
        }catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }finally{
        try{
            pst.close();
        }catch(Exception e){
            
         }
        }
       
          quest_no++;
      }while(quest_no < cnt);
        // JOptionPane.showMessageDialog(null,yes_final);
         
        starttest st = new starttest();
        st.setCnadidate_fnlscore(yes_final);
    }
      public void clear_start_test(){
           try{
            String sql ="DELETE FROM start_test";
            pst=conn.prepareStatement(sql);
            pst.execute();
            //JOptionPane.showMessageDialog(null,"Deleted");
        }catch(Exception e){
         JOptionPane.showMessageDialog(null,e);
        }finally{
        try{ 
            pst.close();
        }catch(Exception e){
            
        }
    }
      }
     public void clear_mark_test(){
           try{
            String sql ="DELETE FROM mark_test";
            pst=conn.prepareStatement(sql);
            pst.execute();
            //JOptionPane.showMessageDialog(null,"Deleted");
        }catch(Exception e){
         JOptionPane.showMessageDialog(null,e);
        }finally{
        try{ 
            pst.close();
        }catch(Exception e){
            
        }
    }
      }
     public void ending(){
//     lb_msgwait.setText("Please Waite.................");
     //bnt_finish.setVisible(false);
     bnt_prev.setEnabled(false);
     bnt_next.setEnabled(false);
     bnt_finish.setEnabled(false);
     }
    private void bnt_finishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_finishActionPerformed
  
   
   
    if(lbqs.getText().equals("1")){
        JOptionPane.showMessageDialog(null, "You Most Answer The First Question And Clcik On next Button befor Ending The Test");
    }else{
         ending();
    
    get_allquestion();
    //final_candidate_test_score();
    insert_into_allcandidateresult();
    clear_mark_test();
    clear_start_test();
    //show_result();
  // JOptionPane.showMessageDialog(null,"yap");
    
    starttest st = new starttest();
    st.setCadidate_result_id(lb_candidate_reg_no.getText());
    wait_to_show();
    }
    }//GEN-LAST:event_bnt_finishActionPerformed

    public void wait_to_show(){
        jProgressBar1.setVisible(true);
               int val=89;
//        jProgressBar1.setValue(val);
        Thread clock = new Thread(){
            int x=1;
            public void run(){
                for(;;){
                   jProgressBar1.setValue(x);
                   x++;
                   if(x==100){
                        result rst = new result();
                        rst.setVisible(true);
                        dispose();
                   }
                    try {
                        sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(result.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
          clock.start();
    }
    private void optionaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionaActionPerformed
        optionb.setSelected(false);
        optionc.setSelected(false);
        optiond.setSelected(false);
        optione.setSelected(false);
        optiona.setForeground(Color.RED);
        optionb.setForeground(Color.BLACK);
        optionc.setForeground(Color.BLACK);
        optiond.setForeground(Color.BLACK);
        optione.setForeground(Color.BLACK);
        lbget_lbanswer.setText(optiona.getText());
    }//GEN-LAST:event_optionaActionPerformed

    private void btn_previewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_previewActionPerformed
       test_preview test_prev = new test_preview();
       test_prev.setVisible(true);
    }//GEN-LAST:event_btn_previewActionPerformed
   public void show_result(){
     result rst = new result();
     rst.setVisible(true);
     dispose();
   }
    int bill = 0;
    
     
    public void set_test_timeandothers(){
          String get_test_time = newtest.getsubject_test_time();
         
          try{
            String sqlf ="select * from time_oftest WHERE subject_name = '" +get_test_time+ "'";
            pst=conn.prepareStatement(sqlf);
            rs=pst.executeQuery();
            
            while(rs.next()){
                  String subid =rs.getString("id");
                  String sub_name =rs.getString("subject_name");
                  String uptime =rs.getString("time_of_test");
                  String num_of_question =rs.getString("number_of_question");
                  timmm.setText(uptime);
                  subject_test_name.setText(sub_name +" Test");
                  qq.setText(num_of_question);
            }
             
        }catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }finally{
        try{
            pst.close();
        }catch(Exception e){
            
         }
        }
    }
     public void start_test_timer(){
         String uptime ="";
          String get_test_time = newtest.getsubject_test_time();
         
          try{
            String sqlf ="select * from time_oftest WHERE subject_name = '" +get_test_time+ "'";
            pst=conn.prepareStatement(sqlf);
            rs=pst.executeQuery();
            
            while(rs.next()){
                  //String subid =rs.getString("id");
                  //String sub_name =rs.getString("subject_name");
                  uptime =rs.getString("time_of_test");
                  //String num_of_question =rs.getString("number_of_question");
                  
                
            }
             
        }catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }finally{
        try{
            pst.close();
        }catch(Exception e){
            
         }
        }
         if(uptime.equals("5 Minute")){
             uptime ="300";
            
             
         }else if(uptime.equals("10 Minute")){
             uptime ="600";
             
         }else if(uptime.equals("15 Minute")){
             uptime ="900";
             
         }else if(uptime.equals("20 Minute")){
             uptime ="1200";
             
         }else if(uptime.equals("25 Minute")){
             uptime ="1500";
             
         }else if(uptime.equals("30 Minute")){
             uptime ="1800";
             
         }else if(uptime.equals("35 Minute")){
             uptime ="2100";
         }else if(uptime.equals("40 Minute")){
             uptime ="2400";
             
         }else if(uptime.equals("45 Minute")){
             uptime ="2700";
             
         }else if(uptime.equals("50 Minute")){
             uptime ="3000";
             
         }else if(uptime.equals("55 Minute")){
             uptime ="3300";
             
         }else if(uptime.equals("60 Minute")){
             uptime ="3600";
             
         }else if(uptime.equals("65 Minute")){
             uptime ="3900";
             
         }else if(uptime.equals("70 Minute")){
             uptime ="4200";
             
         }else if(uptime.equals("75 Minute")){
             uptime ="4500";
             
         }else if(uptime.equals("80 Minute")){
             uptime ="4800";
             
         }else if(uptime.equals("85 Minute")){
             uptime ="5100";
             
         }else if(uptime.equals("90 Minute")){
             uptime ="5400";
             
         }else if(uptime.equals("95 Minute")){
             uptime ="5700";
             
         }else if(uptime.equals("100 Minute")){
             uptime ="6000";
             
         }else if(uptime.equals("105 Minute")){
             uptime ="6300";
             
         }else if(uptime.equals("110 Minute")){
             uptime ="6600";
             
         }else if(uptime.equals("115 Minute")){
             uptime ="6900";
             
         }else if(uptime.equals("120 Minute")){
             uptime ="7200";
             
         }
         int getuptime =Integer.parseInt(uptime);
         TimerClass tc = new TimerClass(getuptime);
         time = new Timer(1000,tc);
         time.start();
         
     }

    /**
     * @return the cnadidate_fnlscore
     */
    public String getCnadidate_fnlscore() {
        return cnadidate_fnlscore;
    }

    /**
     * @param cnadidate_fnlscore the cnadidate_fnlscore to set
     */
    public void setCnadidate_fnlscore(String cnadidate_fnlscore) {
        this.cnadidate_fnlscore = cnadidate_fnlscore;
    }

    /**
     * @return the candidate_fnlresult
     */
    public String getCandidate_fnlresult() {
        return candidate_fnlresult;
    }

    /**
     * @param candidate_fnlresult the candidate_fnlresult to set
     */
    public void setCandidate_fnlresult(String candidate_fnlresult) {
        this.candidate_fnlresult = candidate_fnlresult;
    }

    /**
     * @return the cadidate_result_id
     */
    public String getCadidate_result_id() {
        return cadidate_result_id;
    }

    /**
     * @param cadidate_result_id the cadidate_result_id to set
     */
    public void setCadidate_result_id(String cadidate_result_id) {
        this.cadidate_result_id = cadidate_result_id;
    }
    public class TimerClass implements ActionListener{
            int counter;
            
            public TimerClass(int counter){
                this.counter=counter;
            }
        public void actionPerformed(ActionEvent e){
            counter --;
             if(counter >=1){
                 lb_test_timer.setText("" + counter);
             }else{
                 lb_test_timer.setText("0000" + counter);
                 test_time_over();
                 time.stop();
                 
             }
        }
    }
    
    public void test_time_over(){
        
        bnt_prev.setText("Time Over!");
        bnt_prev.setBackground(Color.RED);
        bnt_prev.setForeground(Color.WHITE);
        bnt_next.setText("Time Over!");
        bnt_next.setBackground(Color.RED);
        bnt_next.setForeground(Color.WHITE);
        bnt_prev.setEnabled(false);
        bnt_next.setEnabled(false);
        btn_preview.setEnabled(false);
        bnt_finish.setBackground(Color.GREEN);
        
        txt_question.setBackground(Color.RED);
        txt_question.setText("TIME OVER !");
        optiona.setForeground(Color.RED);
        optiona.setText("TIME OVER !");
        optiona.setForeground(Color.RED);
        optionb.setText("TIME OVER !");
        optionb.setForeground(Color.RED);
        optionc.setText("TIME OVER !");
        optionc.setForeground(Color.RED);
        optiond.setText("TIME OVER !");
        optiond.setForeground(Color.RED);
        optione.setText("TIME OVER !");
        optione.setForeground(Color.RED);
        
        optiona.setSelected(true); optionb.setSelected(true);
        optionc.setSelected(true); optiond.setSelected(true); optione.setSelected(true);
    }
    public void insert_into_allcandidateresult(){
         newtest nt = new newtest();
         starttest st = new starttest();
         String candidate_name = nt.getCadidate_test_name();
         String candidate_reg_no = nt.getCadidate_test_reg_no();
         String total_question = lbof.getText();
         String correct = lb_correct.getText();
         String incorrect = lb_incorrect.getText();
         String cndidate_final_score = st.getCnadidate_fnlscore();
         String candidate_final_result = st.getCandidate_fnlresult();
         
         int t1 = 1;
         int t2 =Integer.parseInt(total_question) + t1;
         String t3 = String.format("%s", t2);
          try{
            String sql ="INSERT INTO test_result(Name, Reg_no, passing, obtain, total_question, answered_correct, answered_incorrect, score, result,subject) VALUES (?,?,?,?,?,?,?,?,?,?)";
            pst=conn.prepareStatement(sql);
            pst.setString(1, candidate_name);
            pst.setString(2, candidate_reg_no);
            pst.setString(3, incorrect);
            pst.setString(4, correct);
            pst.setString(5, t3);
            pst.setString(6, correct);
            pst.setString(7, incorrect);
            pst.setString(8, cndidate_final_score);
            pst.setString(9, candidate_final_result);
            pst.setString(10, subject_test_name.getText());
            pst.execute();
           

        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }finally{
            try{
                pst.close();
                // conn.close();
            }catch(Exception e){

            }
        }
     }
    public void final_candidate_test_score(){
        try{

            String sql ="select * from Grade ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if(rs.next()){

                String add1 =rs.getString("Distinct1");
                String add2 =rs.getString("Distinct2");
                String add3 =rs.getString("Excellent1");
                String add4 =rs.getString("Excellent2");
                String add5 =rs.getString("Good1");
                String add6 =rs.getString("Good2");
                String add7 =rs.getString("Pass1");
                String add8 =rs.getString("Pass2");
                String add9 =rs.getString("Fail1");
                String add10 =rs.getString("Fail2");
                
                int v1 = Integer.parseInt(add1);
                int v2 = Integer.parseInt(add2);
                int v3 = Integer.parseInt(add3);
                int v4 = Integer.parseInt(add4);
                int v5 = Integer.parseInt(add5);
                int v6 = Integer.parseInt(add6);
                int v7 = Integer.parseInt(add7);
                int v8 = Integer.parseInt(add8);
                int v9 = Integer.parseInt(add9);
                int v10 =Integer.parseInt(add10);
                
                starttest st = new starttest();
                 //st.setCnadidate_fnlscore(yes_final);
                int get_final_score=Integer.parseInt(st.getCnadidate_fnlscore());
                
                if(get_final_score >=v1){
                   st.setCandidate_fnlresult("(A) PASS");
                }else if(get_final_score >=v3 && get_final_score <v1){
                   st.setCandidate_fnlresult("(B) PASS");
                }else if(get_final_score>=v5 && get_final_score<v3){
                   st.setCandidate_fnlresult("(C) PASS");
                }else if(get_final_score>=v7 && get_final_score<v5){
                    st.setCandidate_fnlresult("(P) PASS");
                }else {
                    st.setCandidate_fnlresult("(F) FAIL");
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }finally{
            try{
                pst.close();
                // conn.close();
            }catch(Exception e){

            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(starttest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(starttest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(starttest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(starttest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new starttest().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ans_combo;
    private javax.swing.JButton bnt_finish;
    private javax.swing.JButton bnt_next;
    private javax.swing.JButton bnt_prev;
    private javax.swing.JButton btn_preview;
    private javax.swing.JComboBox conbo_addroundom;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_anq;
    private javax.swing.JLabel lb_candidate_reg_no;
    private javax.swing.JLabel lb_candidate_reg_no1;
    private javax.swing.JLabel lb_correct;
    private javax.swing.JLabel lb_incorrect;
    private javax.swing.JLabel lb_name;
    private javax.swing.JLabel lb_nanq;
    private javax.swing.JLabel lb_test_timer;
    private javax.swing.JLabel lb_total_number_of_question;
    private javax.swing.JLabel lbget_lbanswer;
    private javax.swing.JLabel lbof;
    private javax.swing.JLabel lbqs;
    private javax.swing.JLabel lbquestionid;
    private javax.swing.JRadioButton optiona;
    private javax.swing.JRadioButton optionb;
    private javax.swing.JRadioButton optionc;
    private javax.swing.JRadioButton optiond;
    private javax.swing.JRadioButton optione;
    private javax.swing.JLabel qq;
    private javax.swing.JLabel subject_test_name;
    private javax.swing.JComboBox suject_combo;
    private javax.swing.JLabel timmm;
    private javax.swing.JTextArea txt_question;
    // End of variables declaration//GEN-END:variables
}
